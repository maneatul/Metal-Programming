{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red108\green121\blue134;\red31\green31\blue36;\red255\green255\blue255;
\red253\green143\blue63;\red252\green106\blue93;\red252\green95\blue163;\red208\green168\blue255;\red65\green161\blue192;
\red208\green191\blue105;\red161\green103\blue230;}
{\*\expandedcolortbl;;\csgenericrgb\c42394\c47462\c52518;\csgenericrgb\c12054\c12284\c14131;\csgenericrgb\c100000\c100000\c100000\c85000;
\csgenericrgb\c99131\c56076\c24611;\csgenericrgb\c98912\c41558\c36568;\csgenericrgb\c98839\c37355\c63833;\csgenericrgb\c81681\c65692\c99927;\csgenericrgb\c25490\c63137\c75294;
\csgenericrgb\c81498\c74939\c41233;\csgenericrgb\c63137\c40392\c90196;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab593
\pard\tx593\pardeftab593\partightenfactor0

\f0\fs24 \cf2 \cb3 //\cf4 \
\cf2 //  Basic Snippets.metal\cf4 \
\cf2 //  Shaders 101\cf4 \
\cf2 //\cf4 \
\cf2 //  Created by Atul Mane on 16/05/25.\cf4 \
\cf2 //\cf4 \
\
\cf5 #include \cf6 <metal_stdlib>\cf4 \
\cf5 #include \cf6 <SwiftUI/SwiftUI_Metal.h>\cf4 \

\f1\b \cf7 using
\f0\b0 \cf4  
\f1\b \cf7 namespace
\f0\b0 \cf4  \cf8 metal\cf4 ;\
\
\
\cf2 // Color Effect Snippets\cf4 \
\cf2 //[[ stitchable ]] half4 name(float2 position, half4 color, args...)\cf4 \
\
[[ stitchable ]] \cf8 half4\cf4  \cf9 name1\cf4 (\cf8 float2\cf4  position, \cf8 half4\cf4  color) \{\
    \cf8 half4\cf4  result = color.a == \cf10 0\cf4  ? half4(\cf10 1\cf4 ,\cf10 0\cf4 ,\cf10 0\cf4 ,\cf10 1\cf4 ) : color;\
    
\f1\b \cf7 return
\f0\b0 \cf4   result;\
\}\
\
\cf2 /*\cf4 \
\cf2  Text("Hello, Metal Shaders!")\cf4 \
\cf2  .font(.largeTitle)\cf4 \
\cf2  .colorEffect(ShaderLibrary.name1())\cf4 \
\cf2  \cf4 \
\cf2  */\cf4 \
\
\
\cf2 //Distortion Effect Snippet\cf4 \
\cf2 //[[ stitchable ]] float2 name(float2 position, args...)\cf4 \
[[ stitchable ]] \cf8 float2\cf4  \cf9 name2\cf4 (\cf8 float2\cf4  position) \{\
    \cf8 float2\cf4  result = float2(position.x, position.y\cf10 +2\cf4 *\cf11 sin\cf4 (position.x));\
    \
    
\f1\b \cf7 return
\f0\b0 \cf4  result;\
\}\
\
\cf2 /*\cf4 \
\cf2  Text("Hello, Metal Shaders!")\cf4 \
\cf2      .font(.largeTitle)\cf4 \
\cf2  .distortionEffect(ShaderLibrary.name2(), maxSampleOffset: .zero)\cf4 \
\cf2  */\cf4 \
\
\
\
\cf2 //Layer Effect Snippet\cf4 \
\cf2 //[[ stitchable ]] half4 name(float2 position, SwiftUI::Layer layer, args...)\cf4 \
[[ stitchable ]] \cf8 half4\cf4  \cf9 name3\cf4 (\cf8 float2\cf4  position, \cf8 SwiftUI\cf4 ::\cf8 Layer\cf4  layer) \{\
    
\f1\b \cf7 return
\f0\b0 \cf4   half4(\cf10 0\cf4 ,\cf10 0\cf4 ,\cf10 1\cf4 ,\cf10 1\cf4 );\
\}\
\
\cf2 /*\cf4 \
\cf2  Text("Hello, Metal Shaders!")\cf4 \
\cf2      .font(.largeTitle)\cf4 \
\cf2  .layerEffect(ShaderLibrary.name3(), maxSampleOffset: .zero)\cf4 \
\cf2  */\cf4 \
\
\cf2 //Distortion Effect Snippet\cf4 \
\cf2 //[[ stitchable ]] float2 name(float2 position, args...)\cf4 \
[[ stitchable ]] \cf8 float2\cf4  \cf9 signShader\cf4 (\cf8 float2\cf4  position, 
\f1\b \cf7 float
\f0\b0 \cf4  amplitude) \{\
    \cf8 float2\cf4  result = float2(position.x, position.y+amplitude*\cf11 sin\cf4 (position.x));\
    
\f1\b \cf7 return
\f0\b0 \cf4  result;\
\}\
\
\cf2 /*\cf4 \
\cf2  Text("Hello, Metal Shaders!")\cf4 \
\cf2  .font(.largeTitle)\cf4 \
\cf2  .distortionEffect(ShaderLibrary.<#name2#>(), maxSampleOffset: .zero)\cf4 \
\cf2  */\cf4 \
\
\
\
\cf2 // Color Effect Snippets with size parameter\cf4 \
\cf2 //[[ stitchable ]] half4 name(float2 position, half4 color, args...)\cf4 \
\
[[ stitchable ]] \cf8 half4\cf4  \cf9 name\cf4 (\cf8 float2\cf4  position, \cf8 half4\cf4  color, \cf8 float2\cf4  size) \{\
    \
    \cf8 float2\cf4  uv = position / size;\
    \cf8 half4\cf4  result = half4(uv.x, uv.y , \cf10 0\cf4 , \cf10 1\cf4 );\
    
\f1\b \cf7 return
\f0\b0 \cf4   result;\
\}\
\
\cf2 /*\cf4 \
\cf2  Text("Hello, Metal Shaders!")\cf4 \
\cf2  .font(.largeTitle)\cf4 \
\cf2  .visualEffect \{ content, proxy in\cf4 \
\cf2  content\cf4 \
\cf2      .colorEffect(\cf4 \
\cf2          ShaderLibrary.name(.float2(proxy.size))\cf4 \
\cf2      )\cf4 \
\cf2 \}\cf4 \
\cf2  \cf4 \
\cf2  */\cf4 \
\
\
\cf2 //Layer Effect Snippet with Size parameter\cf4 \
\cf2 //[[ stitchable ]] half4 name(float2 position, SwiftUI::Layer layer, args...)\cf4 \
[[ stitchable ]] \cf8 half4\cf4  <#name3#>(\cf8 float2\cf4  position, \cf8 SwiftUI\cf4 ::\cf8 Layer\cf4  layer, \cf8 float2\cf4  size) \{\
    
\f1\b \cf7 return
\f0\b0 \cf4   \cf9 half4\cf4 (\cf10 0\cf4 ,\cf10 0\cf4 ,\cf10 1\cf4 ,\cf10 1\cf4 );\
\}\
\
\cf2 /*\cf4 \
\cf2  Text("Hello, Metal Shaders!")\cf4 \
\cf2  .font(.largeTitle)\cf4 \
\cf2  .visualEffect \{ content, proxy in\cf4 \
\cf2      content\cf4 \
\cf2      .layerEffect(ShaderLibrary.<#name3#>(\cf4 \
\cf2                                             .float2(proxy.size)\cf4 \
\cf2                                             ),\cf4 \
\cf2                     maxSampleOffset: .zero)\cf4 \
\cf2  \}\cf4 \
\cf2  \cf4 \
\cf2  */\cf4 \
\
\
\cf2 // Using Timeline with size and time parameters\cf4 \
\cf2 //\cf4 \
\cf2 // Color Effect snippet with Size and Time parameter\cf4 \
[[ stitchable ]] \cf8 half4\cf4  <#name3#>(\cf8 float2\cf4  position, \cf8 half4\cf4  color, \cf8 float2\cf4  size, 
\f1\b \cf7 float
\f0\b0 \cf4  time) \{\
    \cf8 float2\cf4  uv = position / size;\
    \cf8 half4\cf4  result = half4(uv.x, uv.y, \cf10 0\cf4 , \cf10 1\cf4 );\
    \
    
\f1\b \cf7 return
\f0\b0 \cf4  result;\
\}\
\
\cf2 /*\cf4 \
\cf2  private let startDate = Date()\cf4 \
\cf2  \cf4 \
\cf2  TimelineView(.animation) \{ _ in\cf4 \
\cf2     Text("Color Effect with Time and Size")\cf4 \
\cf2         .font(.largeTitle)\cf4 \
\cf2         .visualEffect \{ content, proxy in\cf4 \
\cf2                 content\cf4 \
\cf2                     .colorEffect(\cf4 \
\cf2                         ShaderLibrary.<#name3#>(\cf4 \
\cf2                                     .float2(proxy.size),\cf4 \
\cf2                                     .float(startDate.timeIntervalSinceNow)\cf4 \
\cf2                                         )\cf4 \
\cf2                         )\cf4 \
\cf2     \}\cf4 \
\cf2  \}\cf4 \
\cf2  \cf4 \
\cf2  */\cf4 \
\
\
\
\cf2 // Using Timeline with size and time parameters\cf4 \
\cf2 //\cf4 \
\cf2 // Distortion Effect snippet with Size and Time parameter\cf4 \
[[ stitchable ]] \cf8 float2\cf4  <#name3#>(\cf8 float2\cf4  position, \cf8 float2\cf4  size, 
\f1\b \cf7 float
\f0\b0 \cf4  time) \{\
    \cf8 float2\cf4  result = float2(position.x, position.y\cf10 +2\cf4 *\cf11 sin\cf4 (position.x));\
    \
    
\f1\b \cf7 return
\f0\b0 \cf4  result;\
\}\
\
\cf2 /*\cf4 \
\cf2  private let startDate = Date()\cf4 \
\cf2  \cf4 \
\cf2  TimelineView(.animation) \{ _ in\cf4 \
\cf2     Text("Distortion Effect with Time and Size")\cf4 \
\cf2         .font(.largeTitle)\cf4 \
\cf2         .visualEffect \{ content, proxy in\cf4 \
\cf2                 content\cf4 \
\cf2                     .distortionEffect(\cf4 \
\cf2                         ShaderLibrary.<#name3#>(\cf4 \
\cf2                                     .float2(proxy.size),\cf4 \
\cf2                                     .float(startDate.timeIntervalSinceNow)\cf4 \
\cf2                                         ),\cf4 \
\cf2                             maxSampleOffset: .zero\cf4 \
\cf2                         )\cf4 \
\cf2     \}\cf4 \
\cf2  \}\cf4 \
\cf2  \cf4 \
\cf2  */\cf4 \
\
\cf2 // Using Timeline with size and time parameters\cf4 \
\cf2 //\cf4 \
\cf2 // Layer Effect snippet with Size and Time parameter\cf4 \
[[ stitchable ]] \cf8 half4\cf4  <#name3#>(\cf8 float2\cf4  position, \cf8 SwiftUI\cf4 ::\cf8 Layer\cf4  layer, \cf8 float2\cf4  size, 
\f1\b \cf7 float
\f0\b0 \cf4  time) \{\
        \
    
\f1\b \cf7 return
\f0\b0 \cf4  \cf9 half4\cf4 (\cf10 0\cf4 ,\cf10 0\cf4 ,\cf10 1\cf4 ,\cf10 1\cf4 );\
\}\
\
\cf2 /*\cf4 \
\cf2  private let startDate = Date()\cf4 \
\cf2  \cf4 \
\cf2  TimelineView(.animation) \{ _ in\cf4 \
\cf2     Text("Layer Effect with Time and Size parameters")\cf4 \
\cf2         .font(.largeTitle)\cf4 \
\cf2         .visualEffect \{ content, proxy in\cf4 \
\cf2                 content\cf4 \
\cf2                     .distortionEffect(\cf4 \
\cf2                         ShaderLibrary.<#name3#>(\cf4 \
\cf2                                     .float2(proxy.size),\cf4 \
\cf2                                     .float(startDate.timeIntervalSinceNow)\cf4 \
\cf2                                         ),\cf4 \
\cf2                             maxSampleOffset: .zero\cf4 \
\cf2                         )\cf4 \
\cf2     \}\cf4 \
\cf2  \}\cf4 \
\cf2  \cf4 \
\cf2  */\
\
\pard\tx593\pardeftab593\partightenfactor0
\cf4 \
\cf8 half4\cf4  red = half4(\cf10 1.0\cf4 , \cf10 0.0\cf4 , \cf10 0.0\cf4 , \cf10 1.0\cf4 );\
\cf8 half4\cf4  green = half4(\cf10 0.0\cf4 , \cf10 1.0\cf4 , \cf10 0.0\cf4 , \cf10 1.0\cf4 );\
\cf8 half4\cf4  blue = half4(\cf10 0.0\cf4 , \cf10 0.0\cf4 , \cf10 1.0\cf4 , \cf10 1.0\cf4 );\
\cf8 half4\cf4  black = half4(\cf10 1.0\cf4 , \cf10 0.0\cf4 , \cf10 0.0\cf4 , \cf10 1.0\cf4 );\
\pard\tx593\pardeftab593\partightenfactor0
\cf4 \
}